{"version":3,"sources":["Constants.js","AudioController.js","AudioVisualization.js","AudioPlayer.js","serviceWorker.js","index.js"],"names":["PLAY_MODE","AudioController","duration","mins","secs","playButton","this","props","playing","IconButton","onClick","onClickPlayPause","className","Grid","container","alignItems","item","xs","justify","Slider","value","currentTime","max","onChangeCommitted","e","v","onCurrentTimeChange","aria-labelledby","Box","display","justifyContent","Chip","size","label","formatSecond","spacing","Tooltip","title","color","mode","onChangeMode","onClickPreviousNext","onStepChangeVolume","volume","onVolumeChange","React","Component","AudioVisualization","canvas","createRef","animation","ctx","width","height","analyser","rafCallback","freqByteData","Uint8Array","frequencyBinCount","getByteFrequencyData","clearRect","fillStyle","lineCap","i","numBars","magnitude","fillRect","window","requestAnimationFrame","current","getContext","Math","round","cancelAnimationFrame","renderAudio","ref","AudioContext","webkitAudioContext","shuffle","array","sort","random","AudioPlayer","songs","shuffleSongs","currentSong","state","audio","source","audioCtx","updateWindowDimensions","bind","addEventListener","removeEventListener","setState","innerWidth","innerHeight","step","play","pause","setupAudio","next","changeSong","indexOf","which","length","remove","disconnect","Audio","crossOrigin","src","createAnalyser","createMediaElementSource","connect","destination","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68b1afff.chunk.js","sourcesContent":["export const PLAY_MODE = {\n  'SHUFFLE': 'shuffle',\n  'REPEAT_ONE': 'repeat_one',\n  'REPEAT_ALL': 'repeat_all',\n};\n","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Box from '@material-ui/core/Box';\nimport Chip from '@material-ui/core/Chip';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport RepeatOneIcon from '@material-ui/icons/RepeatOne';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport VolumeDown from '@material-ui/icons/VolumeDown';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\nimport Grid from '@material-ui/core/Grid';\nimport Slider from '@material-ui/core/Slider';\nimport {PLAY_MODE} from './Constants.js'\n\nimport './AudioController.css';\n\nclass AudioController extends React.Component {\n  formatSecond(duration) {\n    let mins = ~~((duration % 3600) / 60);\n    let secs = ~~duration % 60;\n    return (mins < 10 ? `0${mins}` : mins) + \":\" + (secs < 10 ? `0${secs}` : secs);\n  }\n  render() {\n    let playButton = null;\n    if (this.props.playing) {\n      playButton = <IconButton onClick={() => this.props.onClickPlayPause(false)}><PauseIcon/></IconButton>;\n    } else {\n      playButton = <IconButton onClick={() => this.props.onClickPlayPause(true)}><PlayArrowIcon/></IconButton>;\n    }\n    return <div className=\"player-controller\">\n      <Grid container alignItems=\"center\">\n        <Grid item xs={12}>\n          <Grid container alignItems=\"center\" justify=\"center\">\n            <Grid item xs={10}>\n              <Slider\n                value={this.props.currentTime} max={this.props.duration}\n                onChangeCommitted={(e, v) => this.props.onCurrentTimeChange(v)} aria-labelledby=\"continuous-slider\" />\n            </Grid>\n            <Grid item xs={2}>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                <Chip size=\"small\" label={this.formatSecond(this.props.currentTime) + '/' + this.formatSecond(this.props.duration)} />\n              </Box>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <Grid container justify=\"center\" spacing={2}>\n            <Grid item>\n              <Tooltip title=\"Repeat All\">\n                <IconButton\n                  color={this.props.mode === PLAY_MODE.REPEAT_ALL ? 'primary' : 'default'}\n                  onClick={() => this.props.onChangeMode(PLAY_MODE.REPEAT_ALL)}>\n                  <RepeatIcon/>\n                </IconButton>\n              </Tooltip>\n            </Grid>\n            <Grid item>\n              <Tooltip title=\"Shuffle\">\n                <IconButton\n                  color={this.props.mode === PLAY_MODE.SHUFFLE ? 'primary' : 'default'}\n                  onClick={() => this.props.onChangeMode(PLAY_MODE.SHUFFLE)}>\n                  <ShuffleIcon/>\n                </IconButton>\n              </Tooltip>\n            </Grid>\n            <Grid item>\n              <Tooltip title=\"Repeat One\">\n                <IconButton\n                  color={this.props.mode === PLAY_MODE.REPEAT_ONE ? 'primary' : 'default'}\n                  onClick={() => this.props.onChangeMode(PLAY_MODE.REPEAT_ONE)}>\n                  <RepeatOneIcon/>\n                </IconButton>\n              </Tooltip>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <Grid container justify=\"center\" spacing={2}>\n            <Grid item>\n              <IconButton onClick={() => this.props.onClickPreviousNext(-1)}>\n                <SkipPreviousIcon/>\n              </IconButton>\n            </Grid>\n            <Grid item>\n              {playButton}\n            </Grid>\n            <Grid item>\n              <IconButton onClick={() => this.props.onClickPreviousNext(1)}>\n                <SkipNextIcon/>\n              </IconButton>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={4}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <IconButton onClick={() => this.props.onStepChangeVolume(-5)}>\n                <VolumeDown/>\n              </IconButton>\n            </Grid>\n            <Grid item xs>\n              <Slider\n                value={this.props.volume} max={100}\n                onChangeCommitted={(e, v) => this.props.onVolumeChange(v)} aria-labelledby=\"continuous-slider\" />\n            </Grid>\n            <Grid item>\n              <IconButton onClick={() => this.props.onStepChangeVolume(5)}>\n                <VolumeUp/>\n              </IconButton>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>;\n  }\n}\n\nexport default AudioController;\n","import React from 'react';\n\nconst SPACER_WIDTH = 10;\nconst BAR_WIDTH = 5;\nconst OFFSET = 100;\n\nclass AudioVisualization extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n    this.animation = null;\n    this.ctx = null;\n  }\n  renderAudio(){\n    const {width, height, analyser} = this.props;\n    let rafCallback = () => {\n      const freqByteData = new Uint8Array(analyser.frequencyBinCount);\n      analyser.getByteFrequencyData(freqByteData);\n\n      const ctx = this.ctx;\n      ctx.clearRect(0, 0, width, height);\n      ctx.fillStyle = '#3A5E8C';\n      ctx.lineCap = 'round';\n      for (let i = 0; i < this.numBars; ++i) {\n        let magnitude = freqByteData[i + OFFSET] * 2;\n        ctx.fillRect(i * SPACER_WIDTH, height, BAR_WIDTH, -magnitude);\n      }\n      this.animation = window.requestAnimationFrame(rafCallback);\n    }\n    rafCallback();\n  }\n  componentDidMount() {\n    this.ctx = this.canvas.current.getContext('2d');\n  }\n  componentDidUpdate() {\n    this.numBars = Math.round(this.props.width / SPACER_WIDTH);\n    if (this.animation) window.cancelAnimationFrame(this.animation);\n    if (this.props.analyser) this.renderAudio();\n  }\n  componentWillUnmount() {\n    if (this.animation) window.cancelAnimationFrame(this.animation);\n  }\n  render() {\n    return <canvas ref={this.canvas} width={this.props.width} height={this.props.height}></canvas>;\n  }\n}\n\nexport default AudioVisualization;\n","import React from 'react';\nimport AudioController from './AudioController.js';\nimport {PLAY_MODE} from './Constants.js'\nimport AudioVisualization from './AudioVisualization.js';\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\n\nfunction shuffle(array) {\n  return [...array].sort(() => Math.random() - 0.5);\n}\n\nclass AudioPlayer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.songs = [\n      'https://api.tomo.wang/audio/21312012.mp3', // While Your Lips Are Still Red\n      'https://api.tomo.wang/audio/31654478.mp3', // Star Sky\n      'https://api.tomo.wang/audio/5271858.mp3', // 难念的经\n      'https://api.tomo.wang/audio/36990266.mp3', // Faded\n      'https://api.tomo.wang/audio/27937429.mp3', // 盛夏的果实\n      'https://api.tomo.wang/audio/94689.mp3', // 海浪\n      'https://api.tomo.wang/audio/5113327.mp3', // The Sound Of Silence\n      'https://api.tomo.wang/audio/536096151.mp3', // 左手指月\n      'https://api.tomo.wang/audio/1437405183.mp3', // Wicked Games (From Westworld: Season 3)\n      'https://api.tomo.wang/audio/4208658.mp3', // Ghost Love Score\n    ];\n    this.shuffleSongs = shuffle(this.songs);\n    this.current = 0;\n    this.currentSong = this.songs[this.current];\n\n    this.state = {\n      mode: PLAY_MODE.REPEAT_ALL,\n      volume: 50,\n      duration: 0,\n      currentTime: 0,\n      playing: false,\n      width: 0,\n      height: 0,\n      analyser: null,\n    };\n    this.audio = null;\n    this.source = null;\n    this.audioCtx = null;\n    this.analyser = null;\n\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.onVolumeChange = this.onVolumeChange.bind(this);\n    this.onCurrentTimeChange = this.onCurrentTimeChange.bind(this);\n    this.onClickPlayPause = this.onClickPlayPause.bind(this);\n    this.onClickPreviousNext = this.onClickPreviousNext.bind(this);\n    this.onStepChangeVolume = this.onStepChangeVolume.bind(this);\n    this.onChangeMode = this.onChangeMode.bind(this);\n  }\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n  onVolumeChange(volume) {\n    this.setState({ volume });\n    if (this.audio) this.audio.volume = volume / 100;\n  }\n  onStepChangeVolume(step) {\n    let volume = this.state.volume + step;\n    volume = volume < 0 ? 0 : (volume > 100 ? 100 : volume);\n    this.onVolumeChange(volume);\n  }\n  onCurrentTimeChange(currentTime) {\n    this.setState({ currentTime });\n    if (this.audio) this.audio.currentTime = currentTime;\n  }\n  onClickPlayPause(playing) {\n    if (this.audio) {\n      if (playing) this.audio.play();\n      else this.audio.pause();\n    } else if (playing) {\n      this.setupAudio();\n    }\n    this.setState({ playing });\n  }\n  onClickPreviousNext(next) {\n    this.changeSong(next);\n  }\n  onChangeMode(mode) {\n    if (mode === PLAY_MODE.SHUFFLE) {\n      this.shuffleSongs = shuffle(this.songs);\n      this.current = this.shuffleSongs.indexOf(this.currentSong);\n    }\n    this.setState({mode});\n  }\n  changeSong(which) { // 1 for next, -1 for previous\n    let current = this.current;\n    let songs = this.songs;\n    if (this.state.mode === PLAY_MODE.SHUFFLE) {\n      songs = this.shuffleSongs;\n    } else if (this.state.mode === PLAY_MODE.REPEAT_ONE) {\n      songs = [this.currentSong];\n    }\n    if (which === -1) {\n      current = current === 0 ? songs.length - 1 : current - 1;\n    } else {\n      current = current === songs.length - 1 ? 0 : current + 1;\n    }\n    this.current = current;\n    this.currentSong = songs[current];\n    this.setupAudio();\n  }\n  setupAudio() {\n    if (this.audio) this.audio.remove();\n    if (this.source) this.source.disconnect();\n    if (!this.audioCtx) this.audioCtx = new AudioContext();\n    this.audio = new Audio();\n    this.audio.crossOrigin = 'anonymous';\n    this.audio.src = this.currentSong;\n\n    let analyser = this.state.analyser || this.audioCtx.createAnalyser();\n    this.source = this.audioCtx.createMediaElementSource(this.audio);\n    this.source.connect(analyser);\n    analyser.connect(this.audioCtx.destination);\n\n    this.audio.volume = this.state.volume / 100;\n    this.setState({\n      analyser,\n      // duration: this.audio.duration, // available after `canplay`\n      playing: true,\n    });\n    this.audio.addEventListener('canplay', () => {\n      this.setState({\n        duration: this.audio.duration,\n      });\n      if (this.state.playing) this.audio.play();\n    });\n    this.audio.addEventListener('timeupdate', () => {\n      this.setState({\n        currentTime: this.audio.currentTime\n      });\n    });\n    this.audio.addEventListener('ended', () => {\n      this.changeSong(1);\n    });\n  }\n  render() {\n    const {width, height, analyser} = this.state;\n    return <div>\n      <AudioController\n        duration={this.state.duration}\n        currentTime={this.state.currentTime}\n        volume={this.state.volume}\n        playing={this.state.playing}\n        mode={this.state.mode}\n        onVolumeChange={this.onVolumeChange}\n        onStepChangeVolume={this.onStepChangeVolume}\n        onCurrentTimeChange={this.onCurrentTimeChange}\n        onClickPlayPause={this.onClickPlayPause}\n        onClickPreviousNext={this.onClickPreviousNext}\n        onChangeMode={this.onChangeMode}\n      ></AudioController>\n      <AudioVisualization analyser={analyser} width={width} height={height}></AudioVisualization>\n    </div>;\n  }\n}\n\nexport default AudioPlayer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AudioPlayer from './AudioPlayer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AudioPlayer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}